// Autogenerated by hob
window.cls || (window.cls = {});
cls.Ecmascript || (cls.Ecmascript = {});
cls.Ecmascript["1.0"] || (cls.Ecmascript["1.0"] = {});

/** 
  * Result of a script execution.
  */
cls.Ecmascript["1.0"].EvalResult = function(arr)
{
  /** 
    * Evaluation status, a successful evaluation returns SUCCESS.
    */
  // cls.Ecmascript["1.0"].EvalResult.Status
  this.status = arr[0];
  /** 
    * The result of the evaluated script.
    * 
    * If execution failed (status != SUCCESS) then this will contain
    * the undefined value.
    */
  this.value = arr[1] ? new cls.Ecmascript["1.0"].Value(arr[1]) : null;
};
cls.Ecmascript["1.0"].EvalResult.Status =
{
  1: "SUCCESS",
  2: "FAILURE",
  3: "EXCEPTION",
  4: "NO_MEMORY",
  5: "CANCELLED",
};

/** 
  * Represents an ECMAScript value, a value is either one of the primitives
  * like string or boolean or an object.
  */
cls.Ecmascript["1.0"].Value = function(arr)
{
  /** 
    * The type of value.
    * 
    * @note Booleans are encoded as either TRUE or FALSE to shorten the number
    * fields in use.
    */
  // cls.Ecmascript["1.0"].Value.Type
  this.type = arr[0];
  /** 
    * The numeric value, set if type = NUMBER.
    */
  this.number = arr[1];
  /** 
    * The string, set if type = STRING.
    */
  this.str = arr[2];
  /** 
    * Object information, set if type = OBJECT.
    */
  this.object = arr[3] ? new cls.Ecmascript["1.0"].Object(arr[3]) : null;
};
cls.Ecmascript["1.0"].Value.Type =
{
  /** 
    * The undefined type, returned when no value was found or "undefined"
    * was referenced.
    */
  0: "UNDEFINED",
  /** 
    * A null value.
    */
  1: "NULL",
  /** 
    * Boolean value true.
    */
  2: "TRUE",
  /** 
    * Boolean value false.
    */
  3: "FALSE",
  /** 
    * NaN value which cannot be exported to JSON directly.
    * Should be treated like a number.
    * 
    * ECMAScript users should use this code to get the value natively::
    * 
    *   parseFloat("NaN")
    */
  4: "NAN",
  /** 
    * Plus infinity value which cannot be export to JSON directly.
    * Should be treated like a number.
    * 
    * ECMAScript users should use this code to get the value natively::
    * 
    *   parseFloat("Infinity")
    */
  5: "PLUS_INFINITY",
  /** 
    * Minus infinity value which cannot be export to JSON directly.
    * Should be treated like a number.
    * 
    * ECMAScript users should use this code to get the value natively::
    * 
    *   parseFloat("-Infinity")
    */
  6: "MINUS_INFINITY",
  /** 
    * A number, use the field 'number' for the actual value.
    */
  7: "NUMBER",
  /** 
    * A string, use the field 'str' for the actual string data.
    */
  8: "STRING",
  /** 
    * An object, the field 'object' contains object details.
    */
  9: "OBJECT",
};

/** 
  * Information on an ECMAscript object.
  */
cls.Ecmascript["1.0"].Object = function(arr)
{
  /** 
    * The unique ID of the object, valid until the object is garbage collected
    * or the service is disabled.
    * 
    * Is an integer from 1 and up.
    */
  this.objectID = arr[0];
  /** 
    * true if the object can be called, this is typically functions but
    * other objects are also possible.
    */
  this.isCallable = arr[1];
  /** 
    * The type of object, either a plain object or a function.
    */
  // cls.Ecmascript["1.0"].Object.ObjectType
  this.type = arr[2];
  /** 
    * The ID of the prototype for this object if it has a prototype.
    * A prototype is just another object and can be examined with
    * ExamineObjects().
    */
  this.prototypeID = arr[3];
  /** 
    * The name of the class used to create this object.
    */
  this.className = arr[4];
  /** 
    * The name of the function, only set if type = FUNCTION.
    */
  this.functionName = arr[5];
  /** 
    * A list of properties available on the object.
    * 
    * Is omitted in some cases when a full property list (can be huge) is not
    * desirable.
    */
  this.propertyList = (arr[6] || []).map(function(item)
  {
    return new cls.Ecmascript["1.0"].Property(item);
  });
};
cls.Ecmascript["1.0"].Object.ObjectType =
{
  1: "OBJECT",
  2: "FUNCTION",
};

cls.Ecmascript["1.0"].Property = function(arr)
{
  this.name = arr[0];
  this.value = arr[1] ? new cls.Ecmascript["1.0"].Value(arr[1]) : null;
};

